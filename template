#!/usr/bin/env sh

version() {
	echo "Template v2.0.1"
}

usage() {
	cat << EOF
$(version)
Usage: template [options] [path]
Template lets one use handlebars in your files and paste the output.

Available options are:
  -hshow this help
  -vprint the version
  -oset the output dir (defaults to ./out)

With no path given the default is ..

Examples:
  template static/

MIT License

Copyright (c) 2022 Brian Mayer

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF
}

debug() {
	[ "$DEBUG" ] && echo "DEBUG: $*" >&2
}

template() {
	while IFS=  read -r line
	do
		if echo "$line" | grep -q '{{'
		then
			pre="${line%\{\{*}"
			rest="${line#*\{\{}"
			if echo "$line" | grep -q '}}'
			then
				cmd="${rest%\}\}*}"
				rest="${rest#*\}\}}"
			else
				cmd="$rest"
				while IFS=  read -r l
				do
					cmd="$cmd\n${l%\}\}*}"
					echo "$l" | grep -q '}}' && rest="${l#*\}\}}" && break
				done
			fi

			debug "running command: $cmd $args"
			echo "$pre"
			echo "$cmd $args" | sh
			echo "$rest"
		else
			echo "$line"
		fi
	done
}

# Command line options
file="$1"
while [ $1 ]
do
	shift
	case "$1" in
		-h|--help) usage && exit 0;;
		-v|--version) version && exit 0;;
		*) args+=" $1" ;;
	esac
done

debug "running $file with args $args"
if [ -f "$file" ]
then
	echo "$file" | grep -q .tpl || { cat "$file"; exit 0; }
	template < "$file"
else
	template
fi

